import { ProxyContext } from '../server/proxy/proxy-context';
import { RequestParser } from './request-parser';
import { DataMapper } from './data-mapper';


import { WinstonLog } from '../winston-logger';

import { suite, test, slow, timeout } from 'mocha-typescript';
import * as TypeMoq from 'typemoq';
import {should,expect} from 'chai';

import {Log} from '../logger';


@suite
export class DataMapperTests {
  protected dataMap : DataMapper;
  protected log : Log;

  protected parser : TypeMoq.IMock<RequestParser>;

  protected context : ProxyContext;

  before() {    
    should();
    this.log = new WinstonLog();
    this.parser = TypeMoq.Mock.ofType<RequestParser>();
    this.dataMap = new DataMapper(this.parser.object,this.log);
  }


  @test
  undefinedContextTriggersException()  {
    expect(() => {this.dataMap.handleEvent(this.context) }).to.throw();
  }  

}

@suite
class DataMapperTestWithContext extends DataMapperTests {

  before() {
    super.before();
    this.context = new ProxyContext(this.log);
  }

  @test
  requestBodyWithDataIsAddedToDataMap()  {
    let body = '{"test" : "data"}';
    this.context.request.body = body;
    this.parser.setup(x=>x.parse(TypeMoq.It.isValue(body))).returns((b) => { return JSON.parse(body); });
    this.dataMap.handleEvent(this.context);
    (this.context.dataMap.content as any).test.should.equal('data');

  }

  @test
 noErrorOccursIfBodyIsEmpty()  {
    let body = '';
    this.context.request.body = body;
    this.dataMap.handleEvent(this.context);
    this.context.dataMap.content.size.should.equal(0);
  }

}

